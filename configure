#!/bin/bash

echo "╭────────────────────────────────────────────────╮"
echo "│  ▗▄▄▖ ▗▄▖ ▗▖  ▗▖▗▄▄▄▖▗▄▄▄▖ ▗▄▄▖▗▖ ▗▖▗▄▄▖ ▗▄▄▄▖ │"
echo "│ ▐▌   ▐▌ ▐▌▐▛▚▖▐▌▐▌     █  ▐▌   ▐▌ ▐▌▐▌ ▐▌▐▌    │"
echo "│ ▐▌   ▐▌ ▐▌▐▌ ▝▜▌▐▛▀▀▘  █  ▐▌▝▜▌▐▌ ▐▌▐▛▀▚▖▐▛▀▀▘ │"
echo "│ ▝▚▄▄▖▝▚▄▞▘▐▌  ▐▌▐▌   ▗▄█▄▖▝▚▄▞▘▝▚▄▞▘▐▌ ▐▌▐▙▄▄▖ │"
echo "╰────────────────────────────────────────────────╯"
echo

mode=""
edit=true
password_file=""

modes=(dev prod)

usage() {
    echo "Usage: $0 [-h] [-m dev|prod] [-n] [-p password_file]" 1>&2
    echo "    -h : Help" 1>&2
    echo "    -m : Mode (dev / prod)" 1>&2
    echo "    -n : No edit env" 1>&2
    echo "    -p : File containing password to decrypt env" 1>&2
    exit 1
}

rand() {
    local length="$1"

    local chars='A-Za-z0-9'
    local password=''

    for ((i = 0; i < length; i++)); do
        password+=${chars:RANDOM % ${#chars}:1}
    done

    echo "$password"
}

OPTSTRING=":hm:np:"

while getopts ${OPTSTRING} opt; do
    case ${opt} in
        h)
            usage
            ;;
        m)
            mode="${OPTARG}"
            ;;
        n)
            edit=false
            ;;
        p)
            password_file="${OPTARG}"
            ;;
        :)
            echo "Option -${OPTARG} requires an argument."
            usage
            ;;
        ?)
            echo "Invalid option: -${OPTARG}."
            usage
            ;;
    esac
done

if [[ -z "$mode" ]] || [[ ! "${modes[@]}" =~ "$mode" ]]; then
    select mode in "${modes[@]}" ; do
        mode=${modes[REPLY - 1]}
        [[ $mode ]] && break
    done
fi

if [ "$mode" = "prod" ]; then
    echo "Running in production mode is not done rn."
    echo "Please run in dev mode"
    exit 1
fi

echo "Setting up project, cleaning previous runs..."

SUDO=""

if [ $(test -r /var/run/docker.sock; echo "$?") -ne 0 ]; then
    SUDO="sudo"
fi

git submodule update --init --recursive 2>/dev/null

$SUDO docker stop area-web area-mobile area-backend area-db 2>/dev/null
$SUDO docker rm area-web area-mobile area-backend area-db 2>/dev/null
$SUDO docker network rm epitech-area_area 2>/dev/null
$SUDO docker rmi epitech-area-client_mobile epitech-area-client_web epitech-area-server 2>/dev/null


outfile="$(mktemp)"

if [ -z "$password_file" ]; then
    gpg --decrypt ./env/.env.gpg > "$outfile"
else
    chmod 600 "$password_file"
    gpg --batch --yes --passphrase-file "$password_file" --decrypt ./env/.env.gpg > "$outfile"
fi

if $edit ; then
    $EDITOR "$outfile"
fi

source "$outfile"

variable_names=$(grep -oE '^[a-zA-Z_][a-zA-Z0-9_]*=' "$outfile" | sed 's/=$//')

{
    for var in $variable_names; do
        echo "$var=\"${!var}\""
    done
} > .env

envsubst < ./docker/init-mongo.js > ./init-mongo.js

if [ "$mode" = "dev" ]; then
    cp ./docker/docker-compose-dev.yaml docker-compose.yaml
else
    cp ./docker/docker-compose-prod.yaml docker-compose.yaml
fi
